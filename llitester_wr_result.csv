"uri"	"language"	"interactivity_type"	"interactivity_level"	"learning_resource_type"	"title"	"description"	"age_range"
"http://learnyouahaskell.com/higher-order-functions"	"en"	"null"	"null"	"[code, narrative text, table]"	"Higher Order Functions - Learn You a Haskell for Great Good!"	"Haskell functions can take functions as parameters and return functions as return values. They're a really powerful way of solving problems and thinking about programs. Every function in Haskell officially only takes one parameter. Then, 5 is applied to that function and that function produces our desired result. It takes a function and two lists as parameters and then joins the two lists by applying the function between corresponding elements."	">18"
"https://wiki.haskell.org/Higher_order_function"	"en"	"null"	"null"	"[code, table]"	"Higher order function - HaskellWiki"	"A higher-order function is a function that takes other functions as arguments or returns a function as result. Rather than writing and we can parameterize out the difference and define leading to a less error prone definition of each. But now, if we had the function we could parameterize the difference again and define doubleList as but this ties us into a constant parameters and we could redefine things as and define doubleList as This higher-order function ""mapList"" can be used in a wide range of areas to simplify code. In mathematics the counterpart to higher-order functions are functionals (mapping functions to scalars) and function operators (mapping functions to functions). Higher order function Contents 1 Definition 2 Discussion 3 See also From HaskellWiki 2.1 Examples 2.1.1 In the libraries 2.1.2 Simple code examples 2.1.3 Mathematical examples."	">18"
"https://en.wikibooks.org/wiki/Haskell/Higher-order_functions"	"en"	"null"	"null"	"[code, narrative text, table]"	"Haskell/Higher-order functions - Wikibooks, open books for an open world"	"Recursion Lists II (map) Lists III (folds, comprehensions) Type declarations Pattern matching Control structures More on functions Higher-order functions Using GHCi effectively At the heart of functional programming is the idea that functions are just like any other value. The power of functional style comes from handling functions themselves as regular values, i.e. A function that takes another function (or several functions) as an argument is called a higher-order function. Quicksort is a well-known recursive sorting algorithm. Almost all the basic data types in Haskell are members of the Ord class, which is for ordering tests what Eq is for equality tests."	">18"
"http://www.cse.unsw.edu.au/~en1000/haskell/hof.html"	"en"	"null"	"null"	"[table]"	"Higher Order Functions - map fold and filter"	"Higher order functions are functions which take in other functions as input, or return a function as output. But the three most useful higher order functions are map, fold and filter. 1 - map map is the easiest to understand of the three. It takes in two inputs - a function, and a list. You can basically do the same thing with a list comprehension however."	">18"
"https://www.youtube.com/watch?v=XKUsGSjnITc"	"de"	"null"	"null"	"[video, table]"	"Haskell 6a: Higher order functions - YouTube"	"Accompanies Miran Lipovaca's ""Learn You a Haskell for Great Good!"""	"17-18"
"http://www.willamette.edu/~fruehr/haskell/lectures/tutorial4.html"	"en"	"null"	"null"	"[code, image, table]"	"Basic Haskell: higher-order functions"	"  Basic Haskell: higher-order functions      Basic Haskell: higher-order functions      Basic Haskell: higher-order functions      Basic Haskell: higher-order functions      Basic Haskell: higher-order functions      Basic Haskell: higher-order functions      Basic Haskell: higher-order functions     > :t take
take :: Int -> [a] -> [a]

> :t take 10
take 10 :: [a] -> [a]

> :t take 10 ['a'..'z']
take 10 (enumFromTo 'a' 'z') :: [Char] > :t (+)
(+) :: Num a => a -> a -> a

> (+) 10 20
30

> 10 `divMod` 3
(3,1) > (2^) 10
1024

> (^2) 10
100 > map (^2) [1..10]
[1,4,9,16,25,36,49,64,81,100]

> map (`div` 3) [1..20]
[0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6]

> map reverse [""hey"", ""there"", ""world""]
[""yeh"",""ereht"",""dlrow""]

> reverse [""hey"", ""there"", ""world""]
[""world"",""there"",""hey""] > map even [1..5]
[False,True,False,True,False]

> all even (map (2*) [1..5])
True

> any odd [ x^2 | x<-[1..5] ]
True > foldr (+) 0 [1..10]
55

> sum [1..10]
55

> foldr (*) 1 [1..5] == 1 * 2 * 3 * 4 * 5 * 1
True

> foldl (&&) True (map even [2,4..10])
True > zipWith (*) [1..10] [1..10]
[1,4,9,16,25,36,49,64,81,100]

> :t replicate
replicate :: Int -> a -> [a]

> zipWith replicate [1..6] ['a'..'z']
[""a"",""bb"",""ccc"",""dddd"",""eeeee"",""ffffff""]

> takeWhile (<100) [ 2^n | n<-[1..] ]
[2,4,8,16,32,64]

> :t takeWhile
takeWhile :: (a -> Bool) -> [a] -> [a]."	">18"
"https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell/7-tokenizer-higher-order-functions"	"en"	"null"	"null"	"[code, narrative text, table]"	"7. Tokenizer: Higher Order Functions - School of Haskell | School of Haskell"	"Interactive code snippets not yet available for SoH 2.0, see our Status of of School of Haskell 2.0 blog post 2 Jul 2013 Bartosz Milewski View Markdown source  Previously we have implemented a single-character proof-of-concept tokenizer. But before we get there, let's explore some new functional techniques. The second argument is a list of a, and the result is the list of b. This function takes a string of digits and creates a list of Ints corresponding to these digits. Notice what identifier does with the unconsumed input, cs'."	">18"
"http://stackoverflow.com/questions/5792769/what-are-some-interesting-uses-of-higher-order-functions"	"en"	"null"	"null"	"[code, narrative text, table]"	"haskell - What are some interesting uses of higher-order functions? - Stack Overflow"	"I'm currently doing a Functional Programming course and I'm quite amused by the concept of higher-order functions and functions as first class citizens. However, I can't yet think of many practically useful, conceptually amazing, or just plain interesting higher-order functions. I'd appreciate examples in Haskell, which is the language I'm currently learning :) Well, you notice that Haskell has no syntax for loops. It's written using ML, but the ideas apply equally to Haskell. Mark Jason Dominus wrote an entire book called Higher–Order Perl; the book’s source is available for free download in a variety of fine formats, include PDF."	">18"
"https://en.wikipedia.org/wiki/Map_(higher-order_function)"	"en"	"null"	"null"	"[code, narrative text, table]"	"Map (higher-order function) - Wikipedia, the free encyclopedia"	"In many programming languages, map is the name of a higher-order function that applies a given function to each element of a list, returning a list of results in the same order. The concept of a map is not limited to lists: it works for sequential containers, tree-like containers, or even abstract containers such as futures and promises. To do this, we first define a function to square a single number (shown here in Haskell): Afterwards we may call which yields [1, 4, 9, 16, 25], demonstrating that map has gone through the entire list and applied the function square to each element. ""standard library"") and is implemented as: In Haskell, the polymorphic function map :: (a -> b) -> [a] -> [b] is generalized to a polytypic function fmap :: Functor f => (a -> b) -> f a -> f b, which applies to any type belonging the Functor type class. Therefore, compilers will attempt to transform the first form into the second; this type of optimization is known as map fusion and is the functional analog of loop fusion.[1] Map functions can be and often are defined in terms of a fold such as foldr, which means one can do a map-fold fusion: foldr f z ."	">18"
"https://en.wikipedia.org/wiki/First-class_function"	"en"	"null"	"null"	"[code, narrative text, table]"	"First-class function - Wikipedia, the free encyclopedia"	"In computer science, a programming language is said to have first-class functions if it treats functions as first-class citizens. Specifically, this means the language supports passing functions as arguments to other functions, returning them as the values from other functions, and assigning them to variables or storing them in data structures.[1] Some programming language theorists require support for anonymous functions (function literals) as well.[2] In languages with first-class functions, the names of functions do not have any special status; they are treated like ordinary variables with a function type.[3] The term was coined by Christopher Strachey in the context of ""functions as first-class citizens"" in the mid-1960s.[4] First-class functions are a necessity for the functional programming style, in which the use of higher-order functions is a standard practice. There are certain implementation difficulties in passing functions as arguments and returning them as results, especially in the presence of non-local variables introduced in nested and anonymous functions.   In this section we compare how particular programming idioms are handled in a functional language with first-class functions (Haskell) compared to an imperative language where functions are second-class citizens (C). First-class function Contents Concepts[edit] Type theory[edit] Language support[edit] See also[edit] Notes[edit] References[edit] External links[edit] Navigation menu Higher-order functions: passing functions as arguments[edit] Anonymous and nested functions[edit] Non-local variables and closures[edit] Higher-order functions: returning functions as results[edit] Assigning functions to variables[edit] Equality of functions[edit] Personal tools Namespaces Variants Views More Search Navigation Interaction Tools Print/export Languages."	">18"
"http://www.cantab.net/users/antoni.diller/haskell/units/unit05.html"	"en"	"null"	"null"	"[code, narrative text, table]"	"Haskell unit 5: Higher-order functions | Antoni Diller"	"Some of Haskell's frequently used higher-order functions, such as map and filter, are introduced with examples of their use."	">18"
"http://www.cantab.net/users/antoni.diller/haskell/units/unit06.html"	"en"	"null"	"null"	"[code, narrative text, table]"	"Haskell unit 6: The higher-order fold functions | Antoni Diller"	"Haskell's higher-order functions foldr, foldl, foldr1, foldl1, scanr and scanl are explained with examples."	">18"
"http://www.fh-wedel.de/~si/seminare/ss02/Ausarbeitung/2.types/typhas4.html"	"de"	"null"	"null"	"[code, table]"	"Abstrakte Datentypen und das Typsystem von Haskell - Higher-Order
Functions"	"Eine oft wiederkehrende Aufgabe ist es, eine bestimmte Funktion auf einzelne Elemente einer Liste anzuwenden. Denkbar wäre folgende Funktion: Andererseits kann ich mir eine Funktion bauen, die wiederum jede Zahl der Liste um 1 verringert. Da dieser Unterschied sehr gering ist, bietet es sich an, die Funktion, die auf die einzelnen Listenelemente angewendet werden soll, als Parameter zu übergeben. Bei der add1 -Funktion ist es möglich, diese nur verkürzt auszuwerten, beziehungsweise der Funktion nur einen Teil der Parameter zu übergeben. incList :: [Int] -> [Int] incList []     = [] incList [x:xs] = (x + 1) : incList xs decList :: [Int] -> [Int] decList []     = [] decList [x:xs] = (x - 1) : decList xs map :: (a -> b) -> [a] -> [b] map f []     = [] map f (x:xs) = f x : map f xs inc :: Int -> Int inc a = a + 1 incList2 :: [Int] -> [Int] incList2 xs = map inc xs add1 :: Int -> Int -> Int add1 a b = a + b add2 :: (Int,Int) -> Int add2 (a,b) = a + b inc :: Int -> Int inc a = add1 1 a inc :: Int -> Int inc = add1 1."	"17-18"
"http://matt.might.net/articles/higher-order-list-operations/"	"en"	"null"	"null"	"[code, narrative text, table]"	"Higher-order list operations in Racket and Haskell"	"There is a pattern with students learning functional programming. While recursion is better than iteration for functional programming, new functional programmers are unaware of powerful libraries to encapsulate recursion over common data structures like lists. This post explains some of the common higher-order list operations in Racket and Haskell by re-implementing them. To start, I abstract mapping out of adding and substracting to lists, and then I abstract folding and reducing out of mapping. Suppose you want to add one to every element of a list."	">18"
"http://courses.cs.washington.edu/courses/cse341/04wi/lectures/04-ml-higher-order.html"	"en"	"null"	"null"	"[code, narrative text, table]"	"CSE341 Lecture Notes 4: Using higher-order functions"	"[ ^ CSE 341, Winter 2004 home page | Lectures index ] Recall ML's response when we typed in nil at the prompt: The 'a list type annotation is a polymorphic type, because it contains the type variable 'a. Type variables in ML are universally quantified, which means they can stand for ""any type"" --- think of 'a list as ""for all a, list of a"". ML automatically performs instantiation whenever an expression is used in a fashion requiring instantiation --- so, for example, in the expression: In order to make the cons expression typecheck, int was substituted for the type variable 'a, thereby making the cons legal. Here's another value with polymorphic type: This function returns whatever is passed to it (it's called the identity function). Some of the functions you've seen already have polymorphic type."	">18"
"https://ohaskell.dshevchenko.biz/en/about functions/32-higher_order_functions.html"	"en"	"null"	"null"	"[code, narrative text, table]"	"CSE341 Lecture Notes 4: Using higher-order functions"	"[ ^ CSE 341, Winter 2004 home page | Lectures index ] Recall ML's response when we typed in nil at the prompt: The 'a list type annotation is a polymorphic type, because it contains the type variable 'a. Type variables in ML are universally quantified, which means they can stand for ""any type"" --- think of 'a list as ""for all a, list of a"". ML automatically performs instantiation whenever an expression is used in a fashion requiring instantiation --- so, for example, in the expression: In order to make the cons expression typecheck, int was substituted for the type variable 'a, thereby making the cons legal. Here's another value with polymorphic type: This function returns whatever is passed to it (it's called the identity function). Some of the functions you've seen already have polymorphic type."	">18"
"https://stat.ethz.ch/R-manual/R-devel/library/base/html/funprog.html"	"en"	"null"	"null"	"[code, narrative text, table]"	"R: Common Higher-Order Functions in Functional Programming..."	"Reduce uses a binary function to successively combine the elements of a given vector and a possibly given initial value. Filter extracts the elements of a vector for which a predicate (logical) function gives true. a logical indicating whether to proceed from left to right (default) or from right to left. If this possibly augmented vector v has n > 1 elements, Reduce successively applies f to the elements of v from left to right or right to left, respectively. I.e., a left reduce computes l_1 = f(v_1, v_2), l_2 = f(l_1, v_3), etc., and returns l_{n-1} = f(l_{n-2}, v_n), and a right reduce does r_{n-1} = f(v_{n-1}, v_n), r_{n-2} = f(v_{n-2}, r_{n-1}) and returns r_1 = f(v_1, r_2)."	">18"
"https://www.safaribooksonline.com/library/view/learn-you-a/9781457100406/ch05.html"	"en"	"null"	"null"	"[table]"	"5. Higher-Order Functions - Learn You a Haskell for Great Good! [Book]"	"Chapter 5. Higher-Order Functions Haskell functions can take functions as parameters and return functions as return values. A function that does either of these things is called a higher-order function ...  - Selection from Learn You a Haskell for Great Good! [Book]"	">18"
"http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/"	"en"	"null"	"null"	"[code, narrative text, table]"	"YBlog - Learn Haskell Fast and Hard"	"tl;dr: A very short and dense tutorial for learning Haskell. Thanks to Oleg Taykalo you can find a Russian translation here: Part 1 & Part 2 ; I really believe all developers should learn Haskell. 01_basic/10_Introduction/00_hello_world.lhs Tools: Many books/articles about Haskell start by introducing some esoteric formula (quick sort, Fibonacci, etc…). At first I won’t show you any Haskell super power. In Haskell there is a main function and every object has a type."	">18"
"https://www.reddit.com/r/haskell/comments/42s6ab/are_higher_order_functions_virtual_functions_in/"	"en"	"null"	"null"	"[code, narrative text, table]"	"Are higher order functions virtual functions in Haskell? : haskell"	"reddit: the front page of the internet"	">18"
"http://openhaskell.com/lectures/higher-order.html"	"en"	"null"	"null"	"[code, narrative text, table]"	"Open Haskell - Higher order functions"	"Suggested reading: Suppose we want to write a function which keeps only those Integers from the input list which are greater than 100. For example, By now, we know a nice way to do this: But it’s annoying to give gt100 a name, since we are probably never going to use it again. Instead, we can use an anonymous function, also known as a lambda abstraction: \x -> x > 100 (the backslash is supposed to look kind of like a lambda with the short leg missing) is the function which takes a single argument x and outputs whether x is greater than 100. Lambda abstractions can also have multiple arguments. It has to take two arguments, both of which are functions, and output a function."	">18"
"http://book.realworldhaskell.org/read/functional-programming.html"	"en"	"null"	"null"	"[code, narrative text, table]"	"Chapter 4. Functional programming"	"Table of Contents Our early learning of Haskell has two distinct aspects. The first is coming to terms with the shift in mindset from imperative programming to functional: we have to replace our programming habits from other languages. We can compile it to an executable named InteractWith as follows. It returns a list of strings with line termination characters omitted. It can be tricky to test complicated code from ghci, so we will tend to write smaller functions."	">18"
"https://www.youtube.com/watch?v=fhbA1ZDtPiA"	"de"	"null"	"null"	"[video, table]"	"1. Higher Order Functions - YouTube"	"Video from Coursera - École Polytechnique Fédérale de Lausanne - Course: Functional Programming Principles in Scala: https://www.coursera.org/course/progfun"	">18"
"https://www.youtube.com/watch?v=R-WJn2YWzv0"	"de"	"null"	"null"	"[video, table]"	"Haskell Tutorials - Part 13 - Curried and Higher Order Functions - YouTube"	"In this tutorial, I talk about curried functions and show how to use the map function in Haskell. Questions? Please let me know in the comments below."	"16-17"
"https://channel9.msdn.com/Series/C9-Lectures-Erik-Meijer-Functional-Programming-Fundamentals/C9-Lectures-Dr-Erik-Meijer-Functional-Programming-Fundamentals-Chapter-7-of-13"	"en"	"null"	"null"	"[code, narrative text, video, audio, table]"	"C9 Lectures: Dr. Erik Meijer - Functional Programming Fundamentals Chapter 7 of 13 | C9 Lectures: Erik Meijer - Functional Programming Fundamentals | Channel 9"	"In Chapter 7, Dr. Meijer teaches us about Higher-Order Functions. A function is called higher-order if it takes a function as an argument and returns a function as a result:twice    :: (a -&gt; a) -&g"	">18"
"https://vimeo.com/37502175"	"en"	"null"	"null"	"[image, video, table]"	"Functional Society - 3 FP Concepts: Lambda, Higher Order Functions and Currying in Scala and Haskell on Vimeo"	"Functional Society - 3 FP Concepts: Lambda, Higher Order Functions and Currying in Scala and Haskell"	">18"
"http://algs4.cs.princeton.edu/41graph/Graph.java.html"	"en"	"null"	"null"	"[code, table]"	"Graph.java"	"Graph code in Java"	">18"
"http://jgrapht.org/"	"en"	"null"	"null"	"[code, table]"	"Welcome to JGraphT - a free Java Graph Library"	"JGraphT source code has moved from the old svn repository to github. Please send all new contributions there in the form of pull requests. If you'd like to help out with project maintenance, click the Like button for our ""Adopt-a-Highway"" initiative on Facebook. JGraphT supports various types of graphs including: Although powerful, JGraphT is designed to be simple and type-safe (via Java generics). For example, graph vertices can be of any objects."	">18"
"http://stackoverflow.com/questions/51574/good-java-graph-algorithm-library"	"en"	"null"	"null"	"[code, narrative text, table]"	"Good Java graph algorithm library? - Stack Overflow"	"Has anyone had good experiences with any Java libraries for Graph algorithms. To clarify, I'm not looking for a library that produces graphs/charts, I'm looking for one that helps with Graph algorithms, eg minimum spanning tree, Kruskal's algorithm Nodes, Edges, etc. This question's answers are a collaborative effort: if you see something that can be improved, just edit the answer to improve it. Some sample code: Summary: http://neo4j.org/ is a graph database that contains many of graph algorithms and scales better than most in-memory libraries. In a university project I toyed around with yFiles by yWorks and found it had pretty good API."	">18"
"http://docs.oracle.com/cd/E12839_01/apirefs.1111/e13403/javax/ide/util/Graph.html"	"en"	"null"	"null"	"[code, table]"	"Graph (Oracle Fusion Middleware Java API Reference for Oracle Extension SDK Reference)"	"A directed graph consisting of vertices of type T. However, this class contains a cycle detection algorithm in the getSortedVertices() method.        The returned Comparator is not live-connected to the graph. If you make changes to the graph after retrieving a comparator, the comparator will no longer be correct.         In a dependency graph, this method essentially returns all of the downstream dependencies of the given vertex in an order which satisfies the dependencies."	">18"
"http://jung.sourceforge.net/"	"en"	"null"	"null"	"[code, table]"	"JUNG - Java Universal Network/Graph Framework"	"General framework for the modeling, analysis, and visualization of graphs"	">18"
"http://www.i3s.unice.fr/~hogie/software/index.php?name=grph"	"en"	"null"	"null"	"[table]"	"High performance graph library for Java"	"High performance graph library for Java
"	">18"
"http://www.dreamincode.net/forums/topic/377473-graph-data-structure-tutorial/"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.cs.duke.edu/courses/cps100e/fall10/class/11_Bacon/code/Graph.html"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"http://stackoverflow.com/questions/1737627/java-how-to-represent-graphs"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"http://jgrapht.org/javadoc/org/jgrapht/Graph.html"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"http://codereview.stackexchange.com/questions/67970/graph-implementation-in-java-8"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"http://www.cs.umd.edu/class/fall2005/cmsc132/Projects/p6/doc/graph/Vertex.html"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.google.de/url?sa=t"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.youtube.com/watch?v=zVrPdF7f4-I"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.udemy.com/advanced-algorithms-in-java/"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.youtube.com/watch?v=dRpa-czmk-s"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.youtube.com/watch?v=2l5-5PMUc5Y"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.coursera.org/course/algs4partII"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.udemy.com/byte-sized-chunks-graph-algorithms-and-problems-in-java/"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://class.coursera.org/compilers/lecture/83"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://www.coursera.org/course/algs4partI"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://dzone.com/articles/jpa-21-entity-graphs"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"https://concord.org/projects/smartgraphs"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
"http://www.html.it/pag/15097/introduzione-alla-programmazione-java/"	"en"	"null"	"null"	"[code, table]"	"Graph Data Structure Tutorial - Java Tutorials | Dream.In.Code"	"Graph Data Structure Tutorial: "	">18"
